Description: remove dependencies from rebar config
 Without this patch, dependencies would be downloaded and compiled
 by rebar at build time.
Author: Philipp Huebner <debalance@debian.org>

Index: ejabberd/rebar.config.script
===================================================================
--- ejabberd.orig/rebar.config.script
+++ /dev/null
@@ -1,364 +0,0 @@
-%%%----------------------------------------------------------------------
-%%%
-%%% ejabberd, Copyright (C) 2002-2017   ProcessOne
-%%%
-%%% This program is free software; you can redistribute it and/or
-%%% modify it under the terms of the GNU General Public License as
-%%% published by the Free Software Foundation; either version 2 of the
-%%% License, or (at your option) any later version.
-%%%
-%%% This program is distributed in the hope that it will be useful,
-%%% but WITHOUT ANY WARRANTY; without even the implied warranty of
-%%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-%%% General Public License for more details.
-%%%
-%%% You should have received a copy of the GNU General Public License along
-%%% with this program; if not, write to the Free Software Foundation, Inc.,
-%%% 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
-%%%
-%%%----------------------------------------------------------------------
-
-Vars = case file:consult(filename:join([filename:dirname(SCRIPT),"vars.config"])) of
-	   {ok, Terms} ->
-	       Terms;
-	   _Err ->
-	       []
-       end ++ [{cflags, "-g -O2 -Wall"}, {cppflags, "-g -O2 -Wall"},
-	       {ldflags, ""}, {system_deps, false}],
-{cflags, CFlags} = lists:keyfind(cflags, 1, Vars),
-{cppflags, CPPFlags} = lists:keyfind(cppflags, 1, Vars),
-{ldflags, LDFlags} = lists:keyfind(ldflags, 1, Vars),
-{system_deps, SystemDeps}  = lists:keyfind(system_deps, 1, Vars),
-
-GetCfg0 = fun(F, Cfg, [Key | Tail], Default) ->
-		  Val = case lists:keyfind(Key, 1, Cfg) of
-			    {Key, V1} -> V1;
-			    false -> Default
-			end,
-		  case Tail of
-		      [] ->
-			  Val;
-		      _ ->
-			  F(F, Val, Tail, Default)
-		  end
-	  end,
-ModCfg0 = fun(F, Cfg, [Key | Tail], Op, Default) ->
-		  {OldVal, PartCfg} = case lists:keytake(Key, 1, Cfg) of
-					  {value, {_, V1}, V2} -> {V1, V2};
-					  false -> {if Tail == [] -> Default; true -> [] end, Cfg}
-				      end,
-		  case Tail of
-		      [] ->
-			  [{Key, Op(OldVal)} | PartCfg];
-		      _ ->
-			  [{Key, F(F, OldVal, Tail, Op, Default)} | PartCfg]
-		  end
-	  end,
-
-FilterConfig = fun(F, Cfg, [{Path, true, ModFun, Default} | Tail]) ->
-		       F(F, ModCfg0(ModCfg0, Cfg, Path, ModFun, Default), Tail);
-		  (F, Cfg, [{Path, SourcePath, true, ModFun, Default, SourceDefault} | Tail]) ->
-		       SourceVal = GetCfg0(GetCfg0, Cfg, SourcePath, SourceDefault),
-		       ModFun2 = fun(V) -> ModFun(V, SourceVal) end,
-		       F(F, ModCfg0(ModCfg0, Cfg, Path, ModFun2, Default), Tail);
-		  (F, Cfg, [_ | Tail]) ->
-		       F(F, Cfg, Tail);
-		  (_, Cfg, []) ->
-		       Cfg
-	       end,
-
-IsRebar3 = case application:get_key(rebar, vsn) of
-	       {ok, VSN} ->
-		   [VSN1 | _] = string:tokens(VSN, "-"),
-		   [Maj, _Min, _Patch] = string:tokens(VSN1, "."),
-		   (list_to_integer(Maj) >= 3);
-	       undefined ->
-		   lists:keymember(mix, 1, application:loaded_applications())
-	   end,
-
-SysVer = erlang:system_info(otp_release),
-
-ProcessSingleVar = fun(F, Var, Tail) ->
-			   case F(F, [Var], []) of
-			       [] -> Tail;
-			       [Val] -> [Val | Tail]
-			   end
-		   end,
-
-ProcessVars = fun(_F, [], Acc) ->
-		      lists:reverse(Acc);
-		 (F, [{Type, Ver, Value} | Tail], Acc) when
-			Type == if_version_above orelse
-			Type == if_version_below ->
-		      SysVer = erlang:system_info(otp_release),
-		      Include = if Type == if_version_above ->
-					SysVer > Ver;
-				   true ->
-					SysVer < Ver
-				end,
-		      if Include ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			 true ->
-			      F(F, Tail, Acc)
-		      end;
-		 (F, [{Type, Ver, Value, ElseValue} | Tail], Acc) when
-			Type == if_version_above orelse
-			Type == if_version_below ->
-		      Include = if Type == if_version_above ->
-					SysVer > Ver;
-				   true ->
-					SysVer < Ver
-				end,
-		      if Include ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			 true ->
-			      F(F, Tail, ProcessSingleVar(F, ElseValue, Acc))
-		      end;
-		 (F, [{Type, Var, Value} | Tail], Acc) when
-			Type == if_var_true orelse
-			Type == if_var_false ->
-		      Flag = Type == if_var_true,
-		      case proplists:get_bool(Var, Vars) of
-			  V when V == Flag ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			  _ ->
-			      F(F, Tail, Acc)
-		      end;
-		 (F, [{Type, Value} | Tail], Acc) when
-			Type == if_rebar3 orelse
-			Type == if_not_rebar3 ->
-		      Flag = Type == if_rebar3,
-		      case IsRebar3 == Flag of
-			  true ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			  _ ->
-			      F(F, Tail, Acc)
-		      end;
-		 (F, [{Type, Var, Match, Value} | Tail], Acc) when
-			Type == if_var_match orelse
-			Type == if_var_no_match ->
-		      case proplists:get_value(Var, Vars) of
-			  V when V == Match ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			  _ ->
-			      F(F, Tail, Acc)
-		      end;
-		 (F, [{if_have_fun, MFA, Value} | Tail], Acc) ->
-		      {Mod, Fun, Arity} = MFA,
-		      code:ensure_loaded(Mod),
-		      case erlang:function_exported(Mod, Fun, Arity) of
-			  true ->
-			      F(F, Tail, ProcessSingleVar(F, Value, Acc));
-			  false ->
-			      F(F, Tail, Acc)
-		      end;
-		 (F, [Other1 | Tail1], Acc) ->
-		      F(F, Tail1, [F(F, Other1, []) | Acc]);
-		 (F, Val, Acc) when is_tuple(Val) ->
-		      list_to_tuple(F(F, tuple_to_list(Val), Acc));
-		 (_F, Other2, _Acc) ->
-		      Other2
-	      end,
-
-MaybeApply = fun(Val) when is_function(Val) ->
-		     Val();
-		(Val) ->
-		     Val
-	     end,
-MaybeApply2 = fun(Val, Arg) when is_function(Val) ->
-		      Val(Arg);
-		 (Val, _) ->
-		      Val
-	      end,
-
-AppendStr = fun(Append) ->
-		    fun("") ->
-			    lists:flatten(MaybeApply(Append));
-		       (Val) ->
-			    lists:flatten([Val, " ", MaybeApply(Append)])
-		    end
-	    end,
-AppendList = fun(Append) ->
-		     fun(Val) ->
-			     Val ++ MaybeApply(Append)
-		     end
-	     end,
-AppendStr2 = fun(Append) ->
-		     fun("", Arg) ->
-			     lists:flatten(MaybeApply2(Append, Arg));
-			(Val, Arg) ->
-			     lists:flatten([Val, " ", MaybeApply2(Append, Arg)])
-		     end
-	     end,
-AppendList2 = fun(Append) ->
-		      fun(Val, Arg) ->
-			      Val ++ MaybeApply2(Append, Arg)
-		      end
-	      end,
-
-Rebar3DepsFilter =
-fun(DepsList) ->
-	lists:map(fun({DepName, _, {git, _, {tag, Version}}}) ->
-			  {DepName, Version};
-		     (Dep) ->
-			  Dep
-		  end, DepsList)
-end,
-
-GlobalDepsFilter =
-fun(Deps) ->
-	DepNames = lists:map(fun({DepName, _, _}) -> DepName;
-				({DepName, _}) -> DepName
-			     end, Deps),
-	lists:filtermap(fun(Dep) ->
-				case code:lib_dir(Dep) of
-				    {error, _} ->
-					{true, "Unable to locate dep '" ++ atom_to_list(Dep) ++ "' in system deps."};
-				    _ ->
-					false
-				end
-			end, DepNames)
-end,
-
-{ok, Cwd} = file:get_cwd(),
-TestConfigFile = filename:join([Cwd, "test", "config.ctc"]),
-TestConfig = case file:read_file_info(TestConfigFile) of
-		 {ok, _} ->
-		     [" -userconfig ct_config_plain ", TestConfigFile, " "];
-		 _ ->
-		     ""
-	     end,
-
-ResolveDepPath = case {SystemDeps, IsRebar3} of
-		     {true, _} ->
-			 fun("deps/" ++ Rest) ->
-				 Slash = string:str(Rest, "/"),
-				 code:lib_dir(
-				   string:sub_string(Rest, 1, Slash -1)) ++
-				     string:sub_string(Rest, Slash);
-			    (Path) ->
-				 Path
-			 end;
-		     {_, true} ->
-			 fun("deps/" ++ Rest) ->
-				 Slash = string:str(Rest, "/"),
-				 "_build/default/lib/" ++
-				     string:sub_string(Rest, 1, Slash - 1) ++
-				     string:sub_string(Rest, Slash);
-			    (Path) ->
-				 Path
-			 end;
-		     _ ->
-			 fun(P) ->
-				 P
-			 end
-		 end,
-
-CtParams = fun(CompileOpts) ->
-		   ["-ct_hooks cth_surefire ",
-		    lists:map(fun({i, IncPath}) ->
-				      [" -include ", filename:join([Cwd, ResolveDepPath(IncPath)])]
-			      end, CompileOpts),
-		    TestConfig]
-	   end,
-
-GenDepConfigureLine =
-fun(DepPath, Flags) ->
-	["sh -c 'if test ! -f config.status -o ",
-	 "../../config.status -nt config.status; ",
-	 "then (",
-	 "CFLAGS=\"", CFlags,"\" ",
-	 "CPPFLAGS=\"", CPPFlags, "\" "
-	 "LDFLAGS=\"", LDFlags, "\"",
-	 " ./configure ", string:join(Flags, " "),
-	 "); fi'"]
-end,
-
-GenDepsConfigure =
-fun(Hooks) ->
-	lists:map(fun({Pkg, Flags}) ->
-			  DepPath = ResolveDepPath("deps/" ++ Pkg ++ "/"),
-			  {add, list_to_atom(Pkg), [{pre_hooks, {'compile',
-			   lists:flatten(GenDepConfigureLine(DepPath, Flags))}}]}
-		  end, Hooks)
-end,
-
-ProcessErlOpt = fun(Vals) ->
-			lists:map(
-			  fun({i, Path}) ->
-				  {i, ResolveDepPath(Path)};
-			     (ErlOpt) ->
-				  ErlOpt
-			  end, Vals)
-		end,
-
-ProcssXrefExclusions = fun(Items) ->
-			       [{lists:flatten(["(XC - UC) || (XU - X - B ",
-					       [[" - ", V] || V <- Items], ")"]),
-				[]}]
-		       end,
-
-ProcessFloatingDeps =
-fun(Deps, FDeps) ->
-	lists:map(fun({DepName, _Ver, {git, Repo, _Commit}} = Dep) ->
-			  case lists:member(DepName, FDeps) of
-			      true ->
-				  {DepName, ".*", {git, Repo}};
-			      _ ->
-				  Dep
-			  end;
-		     (Dep2) ->
-			  Dep2
-		  end, Deps)
-end,
-
-TravisPostHooks =
-fun(true) ->
-	[{eunit, "echo '\n%%! -pa .eunit/ deps/coveralls/ebin\n" ++
-	      "main(_)->{ok,F}=file:open(\"erlang.json\",[write])," ++
-	      "io:fwrite(F,\"~s\",[coveralls:convert_file(" ++
-	      "\".eunit/cover.coverdata\", \"" ++
-	      os:getenv("TRAVIS_JOB_ID") ++
-	      "\", \"travis-ci\",\"\")]).' > getcover.erl"},
-	 {eunit, "escript ./getcover.erl"}];
-   (_) ->
-	[]
-end,
-
-Rules = [
-	 {[provider_hooks], IsRebar3,
-	  AppendList([{pre, [
-			     {compile, {asn, compile}},
-			     {clean, {asn, clean}}
-			    ]}]), []},
-	 {[deps], os:getenv("TRAVIS") == "true",
-	  AppendList([{coveralls, ".*", {git, "https://github.com/markusn/coveralls-erl.git", "master"}}]), []},
-	 {[post_hooks], [cover_enabled], os:getenv("TRAVIS") == "true",
-	  AppendList2(TravisPostHooks), [], false},
-	 {[overrides], [post_hook_configure], SystemDeps == false,
-	  AppendList2(GenDepsConfigure), [], []},
-	 {[ct_extra_params], [eunit_compile_opts], true,
-	  AppendStr2(CtParams), "", []},
-	 {[erl_opts], true,
-	  ProcessErlOpt, []},
-	 {[xref_queries], [xref_exclusions], true,
-	  AppendList2(ProcssXrefExclusions), [], []},
-	 {[deps], [floating_deps], true,
-	  ProcessFloatingDeps, [], []},
-	 {[deps], IsRebar3,
-	  Rebar3DepsFilter, []},
-	 {[deps], SystemDeps /= false,
-	  GlobalDepsFilter, []}
-	],
-
-Config = [{plugin_dir, filename:join([filename:dirname(SCRIPT),"plugins"])}]++
-FilterConfig(FilterConfig, ProcessVars(ProcessVars, CONFIG, []), Rules),
-
-%io:format("ejabberd configuration:~n  ~p~n", [Config]),
-
-Config.
-
-%% Local Variables:
-%% mode: erlang
-%% End:
-%% vim: set filetype=erlang tabstop=8:
Index: ejabberd/rebar.config
===================================================================
--- ejabberd.orig/rebar.config
+++ ejabberd/rebar.config
@@ -18,75 +18,11 @@
 %%%
 %%%----------------------------------------------------------------------
 
-{deps, [{lager, ".*", {git, "https://github.com/erlang-lager/lager",
-                       {tag, {if_version_above, "17", "3.4.2", "3.2.1"}}}},
-        {p1_utils, ".*", {git, "https://github.com/processone/p1_utils", {tag, "1.0.10"}}},
-        {cache_tab, ".*", {git, "https://github.com/processone/cache_tab", {tag, "1.0.12"}}},
-        {fast_tls, ".*", {git, "https://github.com/processone/fast_tls", {tag, "1.0.17"}}},
-        {stringprep, ".*", {git, "https://github.com/processone/stringprep", {tag, "1.0.10"}}},
-        {fast_xml, ".*", {git, "https://github.com/processone/fast_xml", {tag, "1.1.25"}}},
-        {xmpp, ".*", {git, "https://github.com/processone/xmpp", {tag, "1.1.16"}}},
-        {fast_yaml, ".*", {git, "https://github.com/processone/fast_yaml", {tag, "1.0.12"}}},
-        {jiffy, ".*", {git, "https://github.com/davisp/jiffy", {tag, "0.14.8"}}},
-        {p1_oauth2, ".*", {git, "https://github.com/processone/p1_oauth2", {tag, "0.6.2"}}},
-        {luerl, ".*", {git, "https://github.com/rvirding/luerl", {tag, "v0.2"}}},
-	{jose, ".*", {git, "git://github.com/potatosalad/erlang-jose.git", {tag, "1.8.4"}}},
-	{fs, ".*", {git, "https://github.com/synrc/fs.git", {tag, "2.12.0"}}},
-	{if_var_true, stun, {stun, ".*", {git, "https://github.com/processone/stun", {tag, "1.0.16"}}}},
-	{if_var_true, sip, {esip, ".*", {git, "https://github.com/processone/esip", {tag, "1.0.17"}}}},
-        {if_var_true, mysql, {p1_mysql, ".*", {git, "https://github.com/processone/p1_mysql",
-                                               {tag, "1.0.4"}}}},
-        {if_var_true, pgsql, {p1_pgsql, ".*", {git, "https://github.com/processone/p1_pgsql",
-                                               {tag, "1.1.4"}}}},
-        {if_var_true, sqlite, {sqlite3, ".*", {git, "https://github.com/processone/erlang-sqlite3",
-                                               {tag, "1.1.5"}}}},
-        {if_var_true, pam, {epam, ".*", {git, "https://github.com/processone/epam",
-                                           {tag, "1.0.3"}}}},
-        {if_var_true, zlib, {ezlib, ".*", {git, "https://github.com/processone/ezlib",
-                                           {tag, "1.0.3"}}}},
-        {if_var_true, riak, {riakc, ".*", {git, "https://github.com/processone/riak-erlang-client.git",
-                                           {tag, {if_version_above, "19", "develop", "2.5.3"}}}}},
-	{if_var_true, graphics, {eimp, ".*", {git, "https://github.com/processone/eimp.git", {tag, "1.0.2"}}}},
-	%% Elixir support, needed to run tests
-        {if_var_true, elixir, {elixir, ".*", {git, "https://github.com/elixir-lang/elixir",
-                                              {tag, {if_version_above, "17", "v1.4.4", "v1.1.1"}}}}},
-        %% TODO: When modules are fully migrated to new structure and mix, we will not need anymore rebar_elixir_plugin
-	{if_not_rebar3, {if_var_true, elixir, {rebar_elixir_plugin, ".*",
-					       {git, "https://github.com/processone/rebar_elixir_plugin", "0.1.0"}}}},
-        {if_var_true, iconv, {iconv, ".*", {git, "https://github.com/processone/iconv",
-                                            {tag, "1.0.6"}}}},
-        {if_var_true, tools, {meck, "0.8.*", {git, "https://github.com/eproxus/meck",
-                                              {tag, "0.8.4"}}}},
-        {if_var_true, tools, {moka, ".*", {git, "https://github.com/processone/moka.git",
-                                           {tag, "1.0.5c"}}}},
-        {if_var_true, redis, {eredis, ".*", {git, "https://github.com/wooga/eredis",
-                                             {tag, "v1.0.8"}}}}]}.
-
-{if_var_true, latest_deps,
- {floating_deps, [cache_tab,
-                  fast_tls,
-                  stringprep,
-                  fast_xml,
-                  esip,
-                  stun,
-                  fast_yaml,
-		  xmpp,
-                  p1_utils,
-                  p1_mysql,
-                  p1_pgsql,
-                  p1_oauth2,
-                  epam,
-                  ezlib,
-		  eimp,
-                  iconv]}}.
 
 {erl_first_files, ["src/ejabberd_config.erl", "src/gen_mod.erl", "src/mod_muc_room.erl", "src/mod_push.erl"]}.
 
 {erl_opts, [nowarn_deprecated_function,
             {i, "include"},
-	    {i, "deps/fast_xml/include"},
-	    {i, "deps/xmpp/include"},
-	    {i, "deps/p1_utils/include"},
             {if_var_false, debug, no_debug_info},
             {if_var_true, debug, debug_info},
 	    {if_var_true, sip, {d, 'SIP'}},
@@ -145,24 +81,11 @@
                    {if_var_false, redis, "(\"eredis\":_/_)"}]}.
 
 {eunit_compile_opts, [{i, "tools"},
-		      {i, "include"},
-		      {i, "deps/p1_utils/include"},
-		      {i, "deps/fast_xml/include"},
-		      {i, "deps/xmpp/include"}]}.
+		      {i, "include"}]}.
 
 {if_version_above, "17", {cover_enabled, true}}.
 {cover_export_enabled, true}.
 
-{post_hook_configure, [{"fast_tls", []},
-                       {"stringprep", []},
-                       {"fast_yaml", []},
-                       {if_var_true, sip, {"esip", []}},
-                       {"fast_xml", [{if_var_true, full_xml, "--enable-full-xml"}]},
-                       {if_var_true, pam, {"epam", []}},
-                       {if_var_true, zlib, {"ezlib", []}},
-		       {if_var_true, graphics, {"eimp", []}},
-                       {if_var_true, iconv, {"iconv", []}}]}.
-
 {port_env, [{"CFLAGS", "-g -O2 -Wall"}]}.
 
 {port_specs, [{"priv/lib/jid.so", ["c_src/jid.c"]}]}.
