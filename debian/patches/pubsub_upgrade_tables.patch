Author: Badlop <badlop@process-one.net>
Date:   Thu Feb 5 21:06:48 2009 +0100

This is a backport to v2.0.1 of the patch fixing inability
of ejabberd v2.x to to properly upgrade "pubsub_node" table
created by an instance of ejabberd v1.x (table format
changed heavily as the PubSub implementation received
major overhaul in 2.x).

The issue is tracked at
https://support.process-one.net/browse/EJAB-817

The issue is fixed in versions 2.0.3 and 2.1.0.

--- a/src/mod_pubsub/mod_pubsub.erl
+++ b/src/mod_pubsub/mod_pubsub.erl
@@ -238,61 +238,67 @@ update_database(Host) ->
 	[host_node, host_parent, info] ->
 	    ?INFO_MSG("upgrade pubsub tables",[]),
 	    F = fun() ->
-			NewRecords =
-			    lists:foldl(
-			      fun({pubsub_node, NodeId, ParentId, {nodeinfo, Items, Options, Entities}}, RecList) ->
-				      ItemsList =
-					  lists:foldl(
-					    fun({item, IID, Publisher, Payload}, Acc) ->
-						    C = {Publisher, unknown},
-						    M = {Publisher, now()},
-						    mnesia:write(
-						      #pubsub_item{itemid = {IID, NodeId},
-								   creation = C,
-								   modification = M,
-								   payload = Payload}),
-						    [{Publisher, IID} | Acc]
-					    end, [], Items),
-				      Owners =
-					  dict:fold(
-					    fun(JID, {entity, Aff, Sub}, Acc) ->
-						    UsrItems =
-							lists:foldl(
-							  fun({P, I}, IAcc) ->
-								  case P of
-								      JID -> [I | IAcc];
-								      _ -> IAcc
-								  end
-							  end, [], ItemsList),
-						    mnesia:write(
-						      #pubsub_state{stateid = {JID, NodeId},
-								    items = UsrItems,
-								    affiliation = Aff,
-								    subscription = Sub}),
-						    case Aff of
-							owner -> [JID | Acc];
-							_ -> Acc
-						    end
-					    end, [], Entities),
-				      mnesia:delete({pubsub_node, NodeId}),
-				      [#pubsub_node{nodeid = NodeId,
-						    parentid = ParentId,
-						    owners = Owners,
-						    options = Options} |
-				       RecList]
-			      end, [],
-			      mnesia:match_object(
-				{pubsub_node, {Host, '_'}, '_', '_'})),
-			mnesia:delete_table(pubsub_node),
-			mnesia:create_table(pubsub_node,
-					    [{disc_copies, [node()]},
-					     {attributes, record_info(fields, pubsub_node)},
-					     {index, [type, parentid]}]),
-			lists:foreach(fun(Record) ->
-					      mnesia:write(Record)
-				      end, NewRecords)
+			lists:foldl(
+			  fun({pubsub_node, NodeId, ParentId, {nodeinfo, Items, Options, Entities}}, RecList) ->
+				  ItemsList =
+				      lists:foldl(
+					fun({item, IID, Publisher, Payload}, Acc) ->
+						C = {Publisher, unknown},
+						M = {Publisher, now()},
+						mnesia:write(
+						  #pubsub_item{itemid = {IID, NodeId},
+							       creation = C,
+							       modification = M,
+							       payload = Payload}),
+						[{Publisher, IID} | Acc]
+					end, [], Items),
+				  Owners =
+				      dict:fold(
+					fun(JID, {entity, Aff, Sub}, Acc) ->
+						UsrItems =
+						    lists:foldl(
+						      fun({P, I}, IAcc) ->
+							      case P of
+								  JID -> [I | IAcc];
+								  _ -> IAcc
+							      end
+						      end, [], ItemsList),
+						mnesia:write(
+						  #pubsub_state{stateid = {JID, NodeId},
+								items = UsrItems,
+								affiliation = Aff,
+								subscription = Sub}),
+						case Aff of
+						    owner -> [JID | Acc];
+						    _ -> Acc
+						end
+					end, [], Entities),
+				  mnesia:delete({pubsub_node, NodeId}),
+				  [#pubsub_node{nodeid = NodeId,
+						parentid = ParentId,
+						owners = Owners,
+						options = Options} |
+				   RecList]
+			  end, [],
+			  mnesia:match_object(
+			    {pubsub_node, {Host, '_'}, '_', '_'}))
 		end,
-	    mnesia:transaction(F);
+	    {atomic, NewRecords} = mnesia:transaction(F),
+	    {atomic, ok} = mnesia:delete_table(pubsub_node),
+	    {atomic, ok} = mnesia:create_table(pubsub_node,
+					       [{disc_copies, [node()]},
+						{attributes, record_info(fields, pubsub_node)},
+						{index, [type, parentid]}]),
+	    FNew = fun() -> lists:foreach(fun(Record) ->
+						  mnesia:write(Record)
+					  end, NewRecords)
+		   end,
+	    case mnesia:transaction(FNew) of
+		{atomic, Result} ->
+		    ?INFO_MSG("Pubsub tables updated correctly: ~p", [Result]);
+		{aborted, Reason} ->
+		    ?ERROR_MSG("Problem updating Pubsub tables:~n~p", [Reason])
+	    end;
 	_ ->
 	    ok
     end.
