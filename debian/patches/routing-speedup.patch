Speeds up routing of messages by directly calling
router process API function instead of sending a message
to the routing process. This reduces amount of locking
between processes.

This issue is tracked upstream as EJAB-1114.

This changeset was introduced in revision 2782,
branch http://svn.process-one.net/ejabberd/branches/ejabberd-2.1.x

The first stable version containing the fix is 2.1.1.

Index: src/mod_pubsub/mod_pubsub.erl
===================================================================
---  a/src/mod_pubsub/mod_pubsub.erl	(revision 2781)
+++  b/src/mod_pubsub/mod_pubsub.erl	(revision 2782)
@@ -1509,7 +1509,7 @@
 		   {"label", translate:translate(Lang, "Allow this Jabber ID to subscribe to this pubsub node?")}],
 		  [{xmlelement, "value", [], [{xmlcdata, "false"}]}]}]}]},
     lists:foreach(fun(Owner) ->
-	ejabberd_router ! {route, service_jid(Host), jlib:make_jid(Owner), Stanza}
+	ejabberd_router:route(service_jid(Host), jlib:make_jid(Owner), Stanza)
     end, Owners).
 
 find_authorization_response(Packet) ->
@@ -1559,7 +1559,7 @@
 	[{xmlelement, "subscription",
 	  [{"jid", jlib:jid_to_string(JID)}|nodeAttr(SNode)] ++ SubAttrs,
 	  []}]),
-    ejabberd_router ! {route, service_jid(Host), JID, Stanza}.
+    ejabberd_router:route(service_jid(Host), JID, Stanza).
 
 handle_authorization_response(Host, From, To, Packet, XFields) ->
     case {lists:keysearch("pubsub#node", 1, XFields),
@@ -2330,7 +2330,7 @@
 	    Stanza = event_stanza_with_delay(
 		[{xmlelement, "items", nodeAttr(Node),
 		  itemsEls([LastItem])}], ModifNow, ModifLjid),
-	    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza}
+	    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza)
     end;
 send_items(Host, Node, NodeId, Type, LJID, Number) ->
     ToSend = case node_action(Host, Type, get_items, [NodeId, LJID]) of
@@ -2355,7 +2355,7 @@
 		[{xmlelement, "items", nodeAttr(Node),
 		  itemsEls(ToSend)}])
     end,
-    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza}.
+    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza).
 
 %% @spec (Host, JID, Plugins) -> {error, Reason} | {result, Response}
 %%	 Host = host()
@@ -2757,7 +2757,7 @@
 				    [{"jid", jlib:jid_to_string(JID)}, 
 				    %{"subid", SubId},
 				     {"subscription", subscription_to_string(Sub)} | nodeAttr(Node)], []}]}]},
-		ejabberd_router ! {route, service_jid(Host), jlib:make_jid(JID), Stanza}
+		ejabberd_router:route(service_jid(Host), jlib:make_jid(JID), Stanza)
 	    end,
 	    Action = fun(#pubsub_node{owners = Owners, type = Type, id = NodeId}) ->
 			    case lists:member(Owner, Owners) of
@@ -3105,7 +3105,7 @@
 				  end,
 			  SHIMStanza = add_headers(Stanza, collection_shim(Node, Nodes)),
 			  lists:foreach(fun(To) ->
-						ejabberd_router ! {route, From, jlib:make_jid(To), SHIMStanza}
+						ejabberd_router:route(From, jlib:make_jid(To), SHIMStanza)
 					end, LJIDs)
 		  end, NodesByJID),
     %% Handles implicit presence subscriptions
@@ -3139,7 +3139,7 @@
 					end
 				    end, [], user_resources(U, S)),
 				    lists:foreach(fun(To) ->
-					ejabberd_router ! {route, Sender, jlib:make_jid(To), Stanza}
+					ejabberd_router:route(Sender, jlib:make_jid(To), Stanza)
 				    end, LJIDs)
 				end)
 			    end, Contacts);
Index: src/mod_pubsub/pubsub_odbc.patch
===================================================================
---  a/src/mod_pubsub/pubsub_odbc.patch	(revision 2781)
+++  b/src/mod_pubsub/pubsub_odbc.patch	(revision 2782)
@@ -433,7 +433,7 @@
 @@ -1510,7 +1320,7 @@
  		  [{xmlelement, "value", [], [{xmlcdata, "false"}]}]}]}]},
      lists:foreach(fun(Owner) ->
- 	ejabberd_router ! {route, service_jid(Host), jlib:make_jid(Owner), Stanza}
+ 	ejabberd_router:route(service_jid(Host), jlib:make_jid(Owner), Stanza)
 -    end, Owners).
 +    end, node_owners(Host, Type, NodeId)).
  
@@ -553,11 +553,11 @@
 +	    event_stanza_with_delay(
  		[{xmlelement, "items", nodeAttr(Node),
 -		  itemsEls([LastItem])}], ModifNow, ModifLjid),
--	    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza}
+-	    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza)
 -    end;
 +		  itemsEls([LastItem])}], ModifNow, ModifLjid)
 +    end,
-+    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza};
++    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza);
  send_items(Host, Node, NodeId, Type, LJID, Number) ->
      ToSend = case node_action(Host, Type, get_items, [NodeId, LJID]) of
  	{result, []} -> 
@@ -628,7 +628,7 @@
  	{result, _} ->
 @@ -2759,8 +2568,8 @@
  				     {"subscription", subscription_to_string(Sub)} | nodeAttr(Node)], []}]}]},
- 		ejabberd_router ! {route, service_jid(Host), jlib:make_jid(JID), Stanza}
+ 		ejabberd_router:route(service_jid(Host), jlib:make_jid(JID), Stanza)
  	    end,
 -	    Action = fun(#pubsub_node{owners = Owners, type = Type, id = NodeId}) ->
 -			    case lists:member(Owner, Owners) of
Index: src/mod_pubsub/mod_pubsub_odbc.erl
===================================================================
---  a/src/mod_pubsub/mod_pubsub_odbc.erl	(revision 2781)
+++  b/src/mod_pubsub/mod_pubsub_odbc.erl	(revision 2782)
@@ -1319,7 +1319,7 @@
 		   {"label", translate:translate(Lang, "Allow this Jabber ID to subscribe to this pubsub node?")}],
 		  [{xmlelement, "value", [], [{xmlcdata, "false"}]}]}]}]},
     lists:foreach(fun(Owner) ->
-	ejabberd_router ! {route, service_jid(Host), jlib:make_jid(Owner), Stanza}
+	ejabberd_router:route(service_jid(Host), jlib:make_jid(Owner), Stanza)
     end, node_owners(Host, Type, NodeId)).
 
 find_authorization_response(Packet) ->
@@ -1369,7 +1369,7 @@
 	[{xmlelement, "subscription",
 	  [{"jid", jlib:jid_to_string(JID)}|nodeAttr(SNode)] ++ SubAttrs,
 	  []}]),
-    ejabberd_router ! {route, service_jid(Host), JID, Stanza}.
+    ejabberd_router:route(service_jid(Host), JID, Stanza).
 
 handle_authorization_response(Host, From, To, Packet, XFields) ->
     case {lists:keysearch("pubsub#node", 1, XFields),
@@ -2157,7 +2157,7 @@
 		[{xmlelement, "items", nodeAttr(Node),
 		  itemsEls([LastItem])}], ModifNow, ModifLjid)
     end,
-    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza};
+    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza);
 send_items(Host, Node, NodeId, Type, LJID, Number) ->
     ToSend = case node_action(Host, Type, get_items, [NodeId, LJID]) of
 	{result, []} -> 
@@ -2181,7 +2181,7 @@
 		[{xmlelement, "items", nodeAttr(Node),
 		  itemsEls(ToSend)}])
     end,
-    ejabberd_router ! {route, service_jid(Host), jlib:make_jid(LJID), Stanza}.
+    ejabberd_router:route(service_jid(Host), jlib:make_jid(LJID), Stanza).
 
 %% @spec (Host, JID, Plugins) -> {error, Reason} | {result, Response}
 %%	 Host = host()
@@ -2566,7 +2566,7 @@
 				    [{"jid", jlib:jid_to_string(JID)}, 
 				    %{"subid", SubId},
 				     {"subscription", subscription_to_string(Sub)} | nodeAttr(Node)], []}]}]},
-		ejabberd_router ! {route, service_jid(Host), jlib:make_jid(JID), Stanza}
+		ejabberd_router:route(service_jid(Host), jlib:make_jid(JID), Stanza)
 	    end,
 	    Action = fun(#pubsub_node{type = Type, id = NodeId}) ->
 			    case lists:member(Owner, node_owners_call(Type, NodeId)) of
@@ -2914,7 +2914,7 @@
 				  end,
 			  SHIMStanza = add_headers(Stanza, collection_shim(Node, Nodes)),
 			  lists:foreach(fun(To) ->
-						ejabberd_router ! {route, From, jlib:make_jid(To), SHIMStanza}
+						ejabberd_router:route(From, jlib:make_jid(To), SHIMStanza)
 					end, LJIDs)
 		  end, NodesByJID),
     %% Handles implicit presence subscriptions
@@ -2948,7 +2948,7 @@
 					end
 				    end, [], user_resources(U, S)),
 				    lists:foreach(fun(To) ->
-					ejabberd_router ! {route, Sender, jlib:make_jid(To), Stanza}
+					ejabberd_router:route(Sender, jlib:make_jid(To), Stanza)
 				    end, LJIDs)
 				end)
 			    end, Contacts);
Index: src/mod_vcard.erl
===================================================================
---  a/src/mod_vcard.erl	(revision 2781)
+++  b/src/mod_vcard.erl	(revision 2782)
@@ -310,7 +310,7 @@
     if
 	(User /= "") or (Resource /= "") ->
 	    Err = jlib:make_error_reply(Packet, ?ERR_SERVICE_UNAVAILABLE),
-	    ejabberd_router ! {route, To, From, Err};
+	    ejabberd_router:route(To, From, Err);
 	true ->
 	    IQ = jlib:iq_query_info(Packet),
 	    case IQ of
