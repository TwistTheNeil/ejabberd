* Fix lintian warnings where possible.

* In debconf code, check if the user name contains
  the "@" character and if it is, does the part of
  the username to the right of it equals to the
  provided hostname. If both conditions hold,
  extract the real username and proceed, otherwise
  complain. At the current state it's possible to
  enter an invalid username and several users
  tripped over this issue.

* Implement processing of standard Debian build options
  to allow parallel builds (has to be tested) and
  builds with gcc code optimizations turned off.

* Better parsing of FIREWALL_WINDOW:
  a) make it robust against invalid input.
  b) allow open ranges like 123- and -234.

* Add comments (and commented out examples) to the
  clauses in the "LISTENING PORTS" config file section
  explaining how to enable IPv6 on a port.

* Seems like git-orig-source doesn't catch
  RC releases. Might be it would be cool to train
  it to find them.


ejabberdctl.8 tasks
===================

* get-cookie
  Verify the claim made about its functionality.

* push-roster
  recheck, manpage entries for mod_ctlextra mentioned other format.

* push-roster-all
  all users on all vhosts?

* push-alltoall
  does each user get the entry for theirselves?

* process-rosteritems
  need more info

* srg-create
  what format of "display"?

* srg-get-info " group host"
  what format?

* srg-get-members " group host"
  what format?


Low priority
============

* Think of implementing /usr/share/ejabberd/common
  which would be sourced by both ejabberdctl and
  ejabberd and processed/constructed certain options.
  Also it seems that the upstream's approach with
  having just one file both for startup and control
  isn't that bad, as current packaging leads to some
  code duplication in scripts.

  Do we need the separate ejabberd script at all?


For reference
=============

* Use upstream ejabberdctl.cfg as /etc/default/ejabberd.
  Requires patching, see the master branch.
  Also ensure that the config is safe w.r.t. proxy65 etc,
  def. log level match etc (compate to the current one).

* Re-check whether the upstream startup files would do
  better than current.
  The current have some nice ideas but they
  a) deviate from upstream
  b) artifically constructing node names for ejabberdctl
     provokes the atom list overflow of the ejabberd host
     in certain scenarious; no robust workaround is known yet.

  On the other hand, upstream scripts:
  a) more cumbersome;
  b) kill epmd;
  c) don't draw dots while waiting for ejabberd to start/stop;
  d) Show nag screens on debug and live targets.

